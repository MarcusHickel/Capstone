<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro"  name="robot">

    <!-- This is an example of a URDF. -->
    <!-- As we move through the file, new things to note will be pointed out. -->
    <!-- It's not meant an example of GOOD design, but an example of some of the various features of URDF/xacro. -->

    <!-- This will include all the contents of example_include.xacro first. Go check it out! -->
    <xacro:include filename="include.xacro" />

    <xacro:include filename="ros2_control.xacro" />


    <!-- This first link called "world" is empty -->
    <link name="world"></link>

    <!-- A simple fixed joint from our empty world link, to our base. -->
    <!-- The base origin is offset from the world origin. -->
    <joint name="base_joint" type="fixed">
        <origin xyz="0 -10 0" rpy="0 0 0"/>
        <parent link="world"/>
        <child link="base_link"/>        
    </joint>

    <!-- base_link is a large rectangular plate. Some things to note: -->
    <!-- - We set the visual origin Z to half the box height, so that the link origin sits at the bottom of the box -->
    <!-- - We set the collision to be identical to the visual -->
    <!-- - We specified the colour manually (but still need to enter a name) -->
    <!-- - We specified all the inertial parameters manually -->
    <link name="base_link">
        <visual>
            <origin xyz="0 0 0.05" rpy="0 0 0"/>
            <geometry>
                <cylinder length=".1" radius=".5" />
            </geometry>
            <material name="green">
                <color rgba="0.2 1 0.2 1"/>
            </material>
        </visual>
        <!-- <collision>
            <origin xyz="0 0 0.05" rpy="0 0 0"/>
            <geometry>
                <box size="1 1 0.1" />
            </geometry>
        </collision> -->
        <inertial>
            <origin xyz="0 0 0.05" rpy="0 0 0"/>
            <mass value="12" />
            <inertia ixx="2.26" ixy="0.0" ixz="0.0" iyy="6.26" iyz="0.0" izz="8.5" /> <!-- Need to change to cylinder-->
        </inertial>
    </link>


    <joint name="azimuth_joint" type="continuous">
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <parent link="base_link"/>
        <child link="azimuth_link"/>  
        <axis xyz="0 0 1"/>
        <limit lower="${-2*pi}" upper="${2*pi}" velocity="100" effort="100"/>       
    </joint>

    <link name="azimuth_link">
        <visual>
            <origin xyz="0 0 .2" rpy="0 0 0"/>
            <geometry>
                <cylinder length=".1" radius=".5" />
            </geometry>
            <material name="blue">
                <color rgba="0.2 0.2 1 1"/>
            </material>
        </visual>
        <!-- <collision>
            <origin xyz="0 0 0.05" rpy="0 0 0"/>
            <geometry>
                <box size="1 1 0.1" />
            </geometry>
        </collision> -->
        <inertial>
            <origin xyz="0 0 0.05" rpy="0 0 0"/>
            <mass value="12" />
            <inertia ixx="2.26" ixy="0.0" ixz="0.0" iyy="6.26" iyz="0.0" izz="8.5" /> <!-- Need to change to cylinder-->
        </inertial>
    </link>

    <!-- camera_joint describes where the camera is relative to the arm -->
    <!-- - Even though the camera isn't moving relative to the arm, it will probably be helpful to have its own link/frame rather than just adding more visuals to the arm -->
    <!-- - For this example, the camera_link origin will be at the centre of the camera's "sensor" -->
    <joint name="altitude_joint" type="revolute">
        <origin xyz="0 0 1" rpy="0 0 0"/>
        <parent link="azimuth_link"/>
        <child link="camera_link"/>  
        <axis xyz="0 -1 0"/>
        <limit lower="0" upper="${pi}" velocity="100" effort="100"/>       
    </joint>



    <!-- camera_link describes the camera at the end of the arm -->
    <!-- - It has multiple visual elements, which ultimately get combined together -->
    <!-- - Even if we specify different materials, RViz will just colour them all the same as the first -->
    <!-- - Although we could also specify multiple collision geometries, instead we just use a single box that encompasses the whole camera -->
    <link name="camera_link">
        <visual>
            <origin xyz="-0.03 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="0.06 0.15 0.15" />
            </geometry>
            <material name="white" />
        </visual>
        <visual>
            <origin xyz="0.03 0 0" rpy="0 ${pi/2} 0"/>
            <geometry>
                <cylinder length="0.06" radius="0.04" />
            </geometry>
            <material name="blue" />
        </visual>
        <collision>
            <origin xyz="0.0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="0.12 0.15 0.15" />
            </geometry>
        </collision>
        <xacro:inertial_box mass="0.1" x="0.12" y="0.15" z="0.15">
            <origin xyz="0.0 0 0" rpy="0 0 0"/>
        </xacro:inertial_box>
    </link>


   <xacro:include filename="gazebo.xacro" />

<!-- Adding the Rocket -->
   <!-- <xacro:include filename="rocket.urdf.xacro"/>  -->


</robot>